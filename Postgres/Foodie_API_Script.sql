/*
  Unfornately, in Postgres we cannot create a database in a transaction block, just like we do in the other scripts
  in this repository. So anyway, I'll leave here the CREATE statement so you and I can do it separately.

  CREATE DATABASE Foodie_DB

  There are some workarounds to dot it, but for now I will leave below the StackOverflow's post that I figured out 
  about it

  https://stackoverflow.com/questions/18389124/simulate-create-database-if-not-exists-for-postgresql
*/


DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.USERS')) IS NULL
	THEN 
		CREATE TABLE USERS (
	        ID UUID PRIMARY KEY,
	        NAME VARCHAR(200) NOT NULL,
	        PHONE VARCHAR(12) NOT NULL UNIQUE,
	        EMAIL VARCHAR(100) NOT NULL UNIQUE,
          PASSWORD TEXT NOT NULL UNIQUE,
	        CPF VARCHAR(11) NOT NULL UNIQUE,
	        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
		);
	END IF;
END

/*
  SELECT to_regclass('public.users') 

  This method checks if the mentioned table exists, if not it returns [NULL]
*/ 

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.USERS')) IS NULL
	THEN 
		CREATE TABLE USERS (
	        ID UUID PRIMARY KEY,
	        NAME VARCHAR(200) NOT NULL,
	        PHONE VARCHAR(12) NOT NULL UNIQUE,
	        EMAIL VARCHAR(100) NOT NULL UNIQUE,
          PASSWORD TEXT NOT NULL UNIQUE,
	        CPF VARCHAR(11) NOT NULL UNIQUE,
	        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
		);
	END IF;
END
$$

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.STORES')) IS NULL
	THEN 
    CREATE TABLE STORES (
        ID UUID PRIMARY KEY,
        NAME VARCHAR(150) NOT NULL,
        AVATAR VARCHAR(150) DEFAULT 'DEFAULT.PNG',
        STORE_TYPE_ID INT NOT NULL,
        DESCRIPTION VARCHAR(8000),
        ORDER_MIN_VALUE DECIMAL(7,2),
        OPEN_AT TIME NOT NULL,
        CLOSED_AT TIME NOT NULL,
        ADDRESS VARCHAR(1000) NOT NULL,
        CNPJ VARCHAR(14) NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CONSTRAINT FK_STORE_STORE_TYPE_ID FOREIGN KEY (STORE_TYPE_ID) REFERENCES STORE_TYPES(ID)
    );
	END IF;
END
$$

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.PAYMENT_OPTIONS')) IS NULL
	THEN 
    CREATE TABLE PAYMENT_OPTIONS (
        ID SERIAL PRIMARY KEY,
        OPTION_NAME VARCHAR(50) NOT NULL
    );
	END IF;
END
$$

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.STORES_CATEGORIES')) IS NULL
	THEN 
    CREATE TABLE STORES_CATEGORIES (
        ID UUID PRIMARY KEY,
        TITLE VARCHAR(30) NOT NULL,
        STORE_ID UUID NOT NULL,
        CONSTRAINT FK_STORECATEGORY_STORE FOREIGN KEY (STORE_ID) REFERENCES STORES(ID)
    );
	END IF;
END
$$

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.PRODUCTS')) IS NULL
	THEN 
    CREATE TABLE PRODUCTS (
        ID UUID PRIMARY KEY,
        NAME VARCHAR(150) NOT NULL,
        VALUE DECIMAL(7,2) NOT NULL,
        STORE_ID UUID NOT NULL,
        DESCRIPTION VARCHAR(300) NOT NULL,
        STORE_CATEGORY_ID UUID NOT NULL,
        WEIGHT VARCHAR(8),
        PEOPLE_SERVED INT,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CONSTRAINT FK_PRODUCT_STORE FOREIGN KEY (STORE_ID) REFERENCES STORES(ID),
        CONSTRAINT FK_PRODUCT_STORECATEGORY FOREIGN KEY (STORE_CATEGORY_ID) REFERENCES STORES_CATEGORIES(ID)
    );
	END IF;
END
$$


DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.CARTS')) IS NULL
	THEN 
    CREATE TABLE CARTS (
        ID UUID PRIMARY KEY,
        PRODUCT_ID UUID NOT NULL,
        USER_ID UUID NOT NULL, 
        PRODUCT_AMOUNT INT NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,               
        CONSTRAINT FK_CARTS_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
        CONSTRAINT FK_CARTS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
    );
	END IF;
END
$$

DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.ORDERS')) IS NULL
	THEN 
    CREATE TABLE ORDERS (
        ID UUID PRIMARY KEY,
        USER_ID UUID NOT NULL,
        CART_ID UUID NOT NULL,
        PAID_AT TIMESTAMP,
        COMPLETED_AT TIMESTAMP,
        PAID_BY_ID INT NOT NULL,
        SUBTOTAL_VALUE DECIMAL(7,2) NOT NULL,
        DELIVERY_FEE_VALUE DECIMAL(7,2) NOT NULL,
        TOTAL_VALUE DECIMAL(7,2) NOT NULL,
        USER_ADDRESS_ID UUID NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CONSTRAINT FK_ORDERS_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
        CONSTRAINT FK_ORDERS_CART FOREIGN KEY (CART_ID) REFERENCES CARTS(ID),
        CONSTRAINT FK_ORDERS_PAIDBY FOREIGN KEY (PAID_BY_ID) REFERENCES PAYMENT_OPTIONS(ID)
    );
	END IF;
END
$$


DO 
$$
BEGIN
	IF (SELECT TO_REGCLASS('PUBLIC.STORE_RATES')) IS NULL
	THEN 
    CREATE TABLE STORE_RATES (
        ID UUID PRIMARY KEY,
        STORE_ID UUID NOT NULL,
        ORDER_ID UUID NOT NULL,
        STARS_NUMBER INT NOT NULL,
        DESCRIPTION VARCHAR(350),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CONSTRAINT FK_STORERATE_STORE FOREIGN KEY (STORE_ID) REFERENCES STORES(ID),
        CONSTRAINT FK_STORERATE_ORDERS FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID)
    );
	END IF;
END
$$

PRINT('-------------- CREATING INDEXES --------------')

/*
 * Here I removed NONCLUSTERED keyword from this part, because, as said in this post in StackOverflow (https://stackoverflow.com/questions/27978157/cluster-and-non-cluster-index-in-postgresql),
 * 
 * PostgreSQL doesn't have the concept of clustered indexes at all. Instead, all tables are heap tables and all indexes are non-clustered indexes.
 * */

CREATE  INDEX IDX_STORE_CNPJ ON STORES(CNPJ);
CREATE  INDEX IDX_STORE_NAME ON STORES(NAME);

CREATE  INDEX IDX_STORECATEGORIES_TITLE ON STORES_CATEGORIES(TITLE);
CREATE  INDEX IDX_STORECATEGORIES_STOREID ON STORES_CATEGORIES(STORE_ID);

CREATE  INDEX IDX_CARTS_PRODUCTID ON CARTS(PRODUCT_ID);
CREATE  INDEX IDX_CARTS_USERID ON CARTS(USER_ID);

CREATE  INDEX IDX_ORDERS_USERID ON ORDERS(USER_ID);
CREATE  INDEX IDX_ORDERS_CARTID ON ORDERS(CART_ID);

CREATE  INDEX IDX_STORERATES_STOREID ON STORE_RATES(STORE_ID);
CREATE  INDEX IDX_STORERATES_ORDERID ON STORE_RATES(ORDER_ID);